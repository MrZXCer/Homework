/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 17 08:13:08 CST 2019
 */

package net.mooctest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.lang.annotation.Annotation;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.TreeSet;
import java.util.Vector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.omg.CORBA.PUBLIC_MEMBER;

import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.stmt.LocalClassDeclarationStmt;
import com.github.javaparser.ast.type.PrimitiveType;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt;
import java.util.EnumSet;
import java.util.Stack;
import net.mooctest.Classification;
import net.mooctest.NaiveBayesClassifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.body.ConstructorDeclaration;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.stmt.ContinueStmt;
import java.sql.SQLRecoverableException;
import java.util.Locale;
import java.util.Set;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.github.javaparser.ast.ArrayCreationLevel;
import com.github.javaparser.ast.Modifier;
import com.github.javaparser.ast.Node;
import com.github.javaparser.ast.expr.IntegerLiteralExpr;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.stmt.SwitchEntryStmt;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import com.github.javaparser.ast.body.AnnotationDeclaration;
import com.github.javaparser.ast.body.Parameter;
import com.github.javaparser.ast.expr.AnnotationExpr;
import com.github.javaparser.ast.expr.MarkerAnnotationExpr;
import com.github.javaparser.ast.expr.SingleMemberAnnotationExpr;
import com.github.javaparser.ast.observer.AstObserver;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.SynchronizedStmt;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.util.Hashtable;
import java.util.Properties;
import net.mooctest.IFeatureProbability;


public class NaiveBayesClassifierTest {

  
  @Test(timeout = 4000)
  public void testMutation() throws Throwable {
	  
  }

	@Test(timeout = 4000)
	public void test0() throws Throwable {
		NaiveBayesClassifier<Classification<Object, Integer>, PrimitiveType.Primitive> naiveBayesClassifier0 = new NaiveBayesClassifier<Classification<Object, Integer>, PrimitiveType.Primitive>();
		PrimitiveType.Primitive primitiveType_Primitive0 = PrimitiveType.Primitive.LONG;
		LinkedHashSet<Classification<Object, Integer>> linkedHashSet0 = new LinkedHashSet<Classification<Object, Integer>>();
		naiveBayesClassifier0.learn(primitiveType_Primitive0,
				(Collection<Classification<Object, Integer>>) linkedHashSet0);
		PrimitiveType.Primitive primitiveType_Primitive1 = PrimitiveType.Primitive.DOUBLE;
		naiveBayesClassifier0.incrementCategory(primitiveType_Primitive1);
		naiveBayesClassifier0.incrementCategory(primitiveType_Primitive1);
		TreeSet<Classification<Object, Integer>> treeSet0 = new TreeSet<Classification<Object, Integer>>();
		Collection<Classification<Classification<Object, Integer>, PrimitiveType.Primitive>> collection0 = naiveBayesClassifier0
				.classifyDetailed(treeSet0);
		assertNotNull(collection0);
	}

	@Test(timeout = 4000)
	public void test1() throws Throwable {
		NaiveBayesClassifier<Integer, String> naiveBayesClassifier0 = new NaiveBayesClassifier<Integer, String>();
		naiveBayesClassifier0.incrementCategory("");
		try {
			naiveBayesClassifier0.classifyDetailed((Collection<Integer>) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
			verifyException("net.mooctest.NaiveBayesClassifier", e);
		}
	}

	@Test(timeout = 4000)
	public void test2() throws Throwable {
		NaiveBayesClassifier<ExplicitConstructorInvocationStmt, String> naiveBayesClassifier0 = new NaiveBayesClassifier<ExplicitConstructorInvocationStmt, String>();
		Stack<ExplicitConstructorInvocationStmt> stack0 = new Stack<ExplicitConstructorInvocationStmt>();
		Classification<ExplicitConstructorInvocationStmt, String> classification0 = new Classification<ExplicitConstructorInvocationStmt, String>(
				stack0, "");
		naiveBayesClassifier0.learn(classification0);
		try {
			naiveBayesClassifier0.classify((Collection<ExplicitConstructorInvocationStmt>) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
			verifyException("net.mooctest.NaiveBayesClassifier", e);
		}
	}

	@Test(timeout = 4000)
	public void test3() throws Throwable {
		NaiveBayesClassifier<Integer, MethodDeclaration> naiveBayesClassifier0 = new NaiveBayesClassifier<Integer, MethodDeclaration>();
		LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
		Classification<Integer, MethodDeclaration> classification0 = naiveBayesClassifier0.classify(linkedHashSet0);
		assertNull(classification0);
	}

	@Test(timeout = 4000)
	public void test4() throws Throwable {
		NaiveBayesClassifier<Classification<Object, Integer>, PrimitiveType.Primitive> naiveBayesClassifier0 = new NaiveBayesClassifier<Classification<Object, Integer>, PrimitiveType.Primitive>();
		PrimitiveType.Primitive primitiveType_Primitive0 = PrimitiveType.Primitive.LONG;
		LinkedHashSet<Classification<Object, Integer>> linkedHashSet0 = new LinkedHashSet<Classification<Object, Integer>>();
		naiveBayesClassifier0.learn(primitiveType_Primitive0,
				(Collection<Classification<Object, Integer>>) linkedHashSet0);
		PrimitiveType.Primitive primitiveType_Primitive1 = PrimitiveType.Primitive.DOUBLE;
		naiveBayesClassifier0.incrementCategory(primitiveType_Primitive1);
		TreeSet<Classification<Object, Integer>> treeSet0 = new TreeSet<Classification<Object, Integer>>();
		Collection<Classification<Classification<Object, Integer>, PrimitiveType.Primitive>> collection0 = naiveBayesClassifier0
				.classifyDetailed(treeSet0);
		assertNotNull(collection0);
	}

	@Test(timeout = 4000)
	public void test5() throws Throwable {
		NaiveBayesClassifier<Classification<Object, Integer>, PrimitiveType.Primitive> naiveBayesClassifier0 = new NaiveBayesClassifier<Classification<Object, Integer>, PrimitiveType.Primitive>();
		PrimitiveType.Primitive primitiveType_Primitive0 = PrimitiveType.Primitive.SHORT;
		naiveBayesClassifier0.incrementCategory(primitiveType_Primitive0);
		PrimitiveType.Primitive primitiveType_Primitive1 = PrimitiveType.Primitive.LONG;
		LinkedHashSet<Classification<Object, Integer>> linkedHashSet0 = new LinkedHashSet<Classification<Object, Integer>>();
		naiveBayesClassifier0.learn(primitiveType_Primitive1,
				(Collection<Classification<Object, Integer>>) linkedHashSet0);
		naiveBayesClassifier0.incrementCategory(primitiveType_Primitive1);
		TreeSet<Classification<Object, Integer>> treeSet0 = new TreeSet<Classification<Object, Integer>>();
		Collection<Classification<Classification<Object, Integer>, PrimitiveType.Primitive>> collection0 = naiveBayesClassifier0
				.classifyDetailed(treeSet0);
		assertNotNull(collection0);
	}

	@Test(timeout = 4000)
	public void test6() throws Throwable {
		NaiveBayesClassifier<PrimitiveType.Primitive, ExplicitConstructorInvocationStmt> naiveBayesClassifier0 = new NaiveBayesClassifier<PrimitiveType.Primitive, ExplicitConstructorInvocationStmt>();
		LinkedList<PrimitiveType.Primitive> linkedList0 = new LinkedList<PrimitiveType.Primitive>();
		ExplicitConstructorInvocationStmt explicitConstructorInvocationStmt0 = new ExplicitConstructorInvocationStmt();
		Classification<PrimitiveType.Primitive, ExplicitConstructorInvocationStmt> classification0 = new Classification<PrimitiveType.Primitive, ExplicitConstructorInvocationStmt>(
				linkedList0, explicitConstructorInvocationStmt0, 0);
		naiveBayesClassifier0.learn(classification0);
		Class<PrimitiveType.Primitive> class0 = PrimitiveType.Primitive.class;
		EnumSet<PrimitiveType.Primitive> enumSet0 = EnumSet.allOf(class0);
		Classification<PrimitiveType.Primitive, ExplicitConstructorInvocationStmt> classification1 = naiveBayesClassifier0
				.classify(enumSet0);
		assertNotNull(classification1);
		assertEquals(0.00390625F, classification1.getProbability(), 0.01F);
	}

	@Test(timeout = 4000)
	public void test0_1() throws Throwable {
		NaiveBayesClassifier<ConstructorDeclaration, Locale.FilteringMode> naiveBayesClassifier0 = new NaiveBayesClassifier<ConstructorDeclaration, Locale.FilteringMode>();
		TreeSet<ConstructorDeclaration> treeSet0 = new TreeSet<ConstructorDeclaration>();
		Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
		Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
		Classification<ConstructorDeclaration, Locale.FilteringMode> classification0 = new Classification<ConstructorDeclaration, Locale.FilteringMode>(
				treeSet0, locale_FilteringMode1, 0.0F);
		naiveBayesClassifier0.learn(classification0);
		naiveBayesClassifier0.learn(locale_FilteringMode0, (Collection<ConstructorDeclaration>) treeSet0);
		naiveBayesClassifier0.learn(classification0);
		Collection<Classification<ConstructorDeclaration, Locale.FilteringMode>> collection0 = naiveBayesClassifier0
				.classifyDetailed(treeSet0);
		assertFalse(collection0.contains(classification0));
	}

	@Test(timeout = 4000)
	public void test1_1() throws Throwable {
		NaiveBayesClassifier<ContinueStmt, SQLRecoverableException> naiveBayesClassifier0 = new NaiveBayesClassifier<ContinueStmt, SQLRecoverableException>();
		ContinueStmt[] continueStmtArray0 = new ContinueStmt[2];
		SimpleName simpleName0 = new SimpleName();
		ContinueStmt continueStmt0 = new ContinueStmt(simpleName0);
		continueStmtArray0[0] = continueStmt0;
		continueStmtArray0[1] = continueStmt0;
		SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", (Throwable) null);
		NaiveBayesClassifier<Integer, ContinueStmt> naiveBayesClassifier1 = new NaiveBayesClassifier<Integer, ContinueStmt>();
		Set<ContinueStmt> set0 = naiveBayesClassifier1.getCategories();
		naiveBayesClassifier0.learn(sQLRecoverableException0, (Collection<ContinueStmt>) set0);
		NodeList<ContinueStmt> nodeList0 = new NodeList<ContinueStmt>(continueStmtArray0);
		Classification<ContinueStmt, SQLRecoverableException> classification0 = naiveBayesClassifier0
				.classify(nodeList0);
		assertEquals(0.25F, classification0.getProbability(), 0.01F);
		assertNotNull(classification0);
	}

	@Test(timeout = 4000)
	public void test2_1() throws Throwable {
		NaiveBayesClassifier<ContinueStmt, SQLRecoverableException> naiveBayesClassifier0 = new NaiveBayesClassifier<ContinueStmt, SQLRecoverableException>();
		ContinueStmt[] continueStmtArray0 = new ContinueStmt[2];
		SimpleName simpleName0 = new SimpleName();
		ContinueStmt continueStmt0 = new ContinueStmt(simpleName0);
		continueStmtArray0[0] = continueStmt0;
		SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", (Throwable) null);
		NaiveBayesClassifier<Integer, ContinueStmt> naiveBayesClassifier1 = new NaiveBayesClassifier<Integer, ContinueStmt>();
		Set<ContinueStmt> set0 = naiveBayesClassifier1.getCategories();
		naiveBayesClassifier0.learn(sQLRecoverableException0, (Collection<ContinueStmt>) set0);
		NodeList<ContinueStmt> nodeList0 = new NodeList<ContinueStmt>(continueStmtArray0);
		try {
			naiveBayesClassifier0.classify(nodeList0);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test3_1() throws Throwable {
		NaiveBayesClassifier<ConstructorDeclaration, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<ConstructorDeclaration, Object>();
		Integer integer0 = new Integer(0);
		Classification<Object, Integer> classification0 = new Classification<Object, Integer>((Collection<Object>) null,
				integer0);
		naiveBayesClassifier0.incrementCategory(classification0);
		try {
			naiveBayesClassifier0.classifyDetailed((Collection<ConstructorDeclaration>) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
			verifyException("net.mooctest.NaiveBayesClassifier", e);
		}
	}

	@Test(timeout = 4000)
	public void test4_1() throws Throwable {
		NaiveBayesClassifier<Integer, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<Integer, Object>();
		Classification<Integer, Object> classification0 = naiveBayesClassifier0.classify((Collection<Integer>) null);
		assertNull(classification0);
	}

	@Test(timeout = 4000)
	public void test5_1() throws Throwable {
		NaiveBayesClassifier<ConstructorDeclaration, Locale.FilteringMode> naiveBayesClassifier0 = new NaiveBayesClassifier<ConstructorDeclaration, Locale.FilteringMode>();
		TreeSet<ConstructorDeclaration> treeSet0 = new TreeSet<ConstructorDeclaration>();
		Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
		naiveBayesClassifier0.learn(locale_FilteringMode0, (Collection<ConstructorDeclaration>) treeSet0);
		Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
		naiveBayesClassifier0.incrementCategory(locale_FilteringMode1);
		Classification<ConstructorDeclaration, Locale.FilteringMode> classification0 = naiveBayesClassifier0
				.classify(treeSet0);
		assertEquals(0.5F, classification0.getProbability(), 0.01F);
		assertNotNull(classification0);
	}

	@Test(timeout = 4000)
	public void test6_1() throws Throwable {
		NaiveBayesClassifier<ConstructorDeclaration, Locale.FilteringMode> naiveBayesClassifier0 = new NaiveBayesClassifier<ConstructorDeclaration, Locale.FilteringMode>();
		TreeSet<ConstructorDeclaration> treeSet0 = new TreeSet<ConstructorDeclaration>();
		Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
		Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
		Classification<ConstructorDeclaration, Locale.FilteringMode> classification0 = new Classification<ConstructorDeclaration, Locale.FilteringMode>(
				treeSet0, locale_FilteringMode1, 0.0F);
		naiveBayesClassifier0.learn(classification0);
		naiveBayesClassifier0.learn(locale_FilteringMode0, (Collection<ConstructorDeclaration>) treeSet0);
		naiveBayesClassifier0.learn(locale_FilteringMode0, (Collection<ConstructorDeclaration>) treeSet0);
		Collection<Classification<ConstructorDeclaration, Locale.FilteringMode>> collection0 = naiveBayesClassifier0
				.classifyDetailed(treeSet0);
		assertFalse(collection0.contains(classification0));
	}

	@Test(timeout = 4000)
	public void test00() throws Throwable {
		LinkedList<Object> linkedList0 = new LinkedList<Object>();
		Node.Parsedness node_Parsedness0 = Node.Parsedness.UNPARSABLE;
		Classification<Object, Node.Parsedness> classification0 = new Classification<Object, Node.Parsedness>(
				linkedList0, node_Parsedness0);
		classification0.toString();
		HashSet<MethodDeclaration> hashSet0 = new HashSet<MethodDeclaration>();
		Classification<MethodDeclaration, SwitchEntryStmt> classification1 = new Classification<MethodDeclaration, SwitchEntryStmt>(
				hashSet0, (SwitchEntryStmt) null);
		classification1.toString();
		Locale locale0 = Locale.CANADA_FRENCH;
		Set<String> set0 = locale0.getUnicodeLocaleAttributes();
		PriorityQueue<Node.Parsedness> priorityQueue0 = new PriorityQueue<Node.Parsedness>();
		Node.Parsedness node_Parsedness1 = Node.Parsedness.PARSED;
		Classification<Node.Parsedness, Node.Parsedness> classification2 = new Classification<Node.Parsedness, Node.Parsedness>(
				priorityQueue0, node_Parsedness1, 2426.769F);
		Object object0 = classification2.getCategory();
		Classification<String, Object> classification3 = new Classification<String, Object>(set0, object0);
		classification3.toString();
		NodeList<SwitchEntryStmt> nodeList0 = new NodeList<SwitchEntryStmt>();
		nodeList0.add((SwitchEntryStmt) null);
		Classification<SwitchEntryStmt, String> classification4 = new Classification<SwitchEntryStmt, String>(nodeList0,
				"Classification [category=null, probability=1.0, featureset=[]]");
		try {
			classification4.toString();
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
			verifyException("java.util.stream.ReferencePipeline$3$1", e);
		}
	}

	@Test(timeout = 4000)
	public void test01() throws Throwable {
		LinkedList<Object> linkedList0 = new LinkedList<Object>();
		Stack<Object> stack0 = new Stack<Object>();
		Node.Parsedness node_Parsedness0 = Node.Parsedness.PARSED;
		stack0.add((Object) node_Parsedness0);
		Classification<Object, List<Object>> classification0 = new Classification<Object, List<Object>>(linkedList0,
				stack0, 4304.0F);
		classification0.toString();
		Modifier modifier0 = Modifier.PRIVATE;
		EnumSet<Modifier> enumSet0 = modifier0.toEnumSet();
		EnumSet<Modifier> enumSet1 = EnumSet.complementOf(enumSet0);
		Classification<Modifier, Node.Parsedness> classification1 = new Classification<Modifier, Node.Parsedness>(
				enumSet1, node_Parsedness0, 1706.8193F);
		classification1.toString();
		ArrayDeque<Annotation> arrayDeque0 = new ArrayDeque<Annotation>();
		arrayDeque0.removeLastOccurrence(modifier0);
		Classification<Annotation, String> classification2 = new Classification<Annotation, String>(arrayDeque0,
				"Classification [category=PARSED, probability=1706.8193, featureset=[PUBLIC, PROTECTED, ABSTRACT, STATIC, FINAL, TRANSIENT, VOLATILE, SYNCHRONIZED, NATIVE, STRICTFP, TRANSITIVE, DEFAULT]]",
				0.0F);
		classification2.toString();
		classification2.toString();
		classification2.toString();
		Object object0 = new Object();
		Classification<Modifier, Object> classification3 = new Classification<Modifier, Object>(enumSet0, object0,
				926.0F);
		classification3.toString();
		Classification<Integer, Integer> classification4 = new Classification<Integer, Integer>(
				(Collection<Integer>) null, (Integer) null, 926.0F);
		classification4.toString();
		Comparator<SwitchEntryStmt> comparator0 = (Comparator<SwitchEntryStmt>) mock(Comparator.class,
				new ViolatedAssumptionAnswer());
		PriorityQueue<SwitchEntryStmt> priorityQueue0 = new PriorityQueue<SwitchEntryStmt>(136, comparator0);
		SwitchEntryStmt switchEntryStmt0 = new SwitchEntryStmt();
		IntegerLiteralExpr integerLiteralExpr0 = new IntegerLiteralExpr();
		SwitchEntryStmt switchEntryStmt1 = switchEntryStmt0.setLabel(integerLiteralExpr0);
		NodeList<Statement> nodeList0 = switchEntryStmt1.getStatements();
		NodeList<Statement> nodeList1 = nodeList0.addFirst(switchEntryStmt0);
		SwitchEntryStmt switchEntryStmt2 = switchEntryStmt1.setStatements(nodeList1);
		SwitchEntryStmt switchEntryStmt3 = switchEntryStmt2.removeLabel();
		Classification<SwitchEntryStmt, SwitchEntryStmt> classification5 = new Classification<SwitchEntryStmt, SwitchEntryStmt>(
				priorityQueue0, switchEntryStmt3);
	}

	@Test(timeout = 4000)
	public void test02() throws Throwable {
		LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
		HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
		List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
		Node.Parsedness node_Parsedness0 = Node.Parsedness.UNPARSABLE;
		Classification<Locale.LanguageRange, Node.Parsedness> classification0 = new Classification<Locale.LanguageRange, Node.Parsedness>(
				list0, node_Parsedness0, (-904.0F));
		float float0 = classification0.getProbability();
		assertEquals((-904.0F), float0, 0.01F);
	}

	@Test(timeout = 4000)
	public void test03() throws Throwable {
		Classification<String, String> classification0 = new Classification<String, String>((Collection<String>) null,
				"AIFQ", 0.0F);
		classification0.toString();
		float float0 = classification0.getProbability();
		assertEquals(0.0F, float0, 0.01F);
		LinkedHashSet<List<String>> linkedHashSet0 = new LinkedHashSet<List<String>>();
		Node.Parsedness node_Parsedness0 = Node.Parsedness.PARSED;
		Classification<List<String>, Node.Parsedness> classification1 = new Classification<List<String>, Node.Parsedness>(
				linkedHashSet0, node_Parsedness0, 1373.409F);
		classification1.toString();
		Modifier modifier0 = Modifier.DEFAULT;
		Classification<String, Modifier> classification2 = new Classification<String, Modifier>(
				(Collection<String>) null, modifier0);
		String string0 = classification2.toString();
		assertEquals("Classification [category=DEFAULT, probability=1.0, featureset=null]", string0);
		classification2.getFeatureset();
		assertEquals(1.0F, classification2.getProbability(), 0.01F);
	}

	@Test(timeout = 4000)
	public void test04() throws Throwable {
		Vector<String> vector0 = new Vector<String>();
		Classification<String, Object> classification0 = new Classification<String, Object>(vector0, vector0);
		classification0.toString();
		Classification<String, Locale.LanguageRange> classification1 = new Classification<String, Locale.LanguageRange>(
				vector0, (Locale.LanguageRange) null);
		classification1.toString();
		classification1.getCategory();
		Node.Parsedness node_Parsedness0 = Node.Parsedness.PARSED;
		Classification<String, Node.Parsedness> classification2 = new Classification<String, Node.Parsedness>(vector0,
				node_Parsedness0);
		String string0 = classification2.toString();
		assertEquals("Classification [category=PARSED, probability=1.0, featureset=[]]", string0);
		TreeSet<MethodDeclaration> treeSet0 = new TreeSet<MethodDeclaration>();
		Classification<MethodDeclaration, String> classification3 = new Classification<MethodDeclaration, String>(
				treeSet0, "Classification [category=PARSED, probability=1.0, featureset=[]]", 4875.357F);
		float float0 = classification3.getProbability();
		assertEquals(4875.357F, float0, 0.01F);
	}

	@Test(timeout = 4000)
	public void test05() throws Throwable {
		ArrayList<Object> arrayList0 = new ArrayList<Object>();
		Classification<Object, MethodDeclaration> classification0 = new Classification<Object, MethodDeclaration>(
				arrayList0, (MethodDeclaration) null, 1923.164F);
		float float0 = classification0.getProbability();
		assertEquals(1923.164F, float0, 0.01F);
	}

	@Test(timeout = 4000)
	public void test06() throws Throwable {
		PriorityQueue<SwitchEntryStmt> priorityQueue0 = new PriorityQueue<SwitchEntryStmt>();
		Integer integer0 = new Integer(0);
		Classification<SwitchEntryStmt, Integer> classification0 = new Classification<SwitchEntryStmt, Integer>(
				priorityQueue0, integer0);
		classification0.getFeatureset();
		assertEquals(1.0F, classification0.getProbability(), 0.01F);
	}

	@Test(timeout = 4000)
	public void test07() throws Throwable {
		ArrayCreationLevel arrayCreationLevel0 = new ArrayCreationLevel(1);
		ArrayCreationLevel arrayCreationLevel1 = arrayCreationLevel0.clone();
		Class<SwitchEntryStmt> class0 = SwitchEntryStmt.class;
		List<SwitchEntryStmt> list0 = arrayCreationLevel1.findAll(class0);
		Classification<SwitchEntryStmt, String> classification0 = new Classification<SwitchEntryStmt, String>(list0,
				"DZ]e", 1);
		String string0 = classification0.toString();
		assertEquals("Classification [category=DZ]e, probability=1.0, featureset=[]]", string0);
	}

	@Test(timeout = 4000)
	public void test08() throws Throwable {
		HashSet<MethodDeclaration> hashSet0 = new HashSet<MethodDeclaration>();
		Classification<MethodDeclaration, Object> classification0 = new Classification<MethodDeclaration, Object>(
				hashSet0, hashSet0, 1126.7369F);
		float float0 = classification0.getProbability();
		assertEquals(1126.7369F, float0, 0.01F);
	}

	@Test(timeout = 4000)
	public void test09() throws Throwable {
		Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
		Node.Parsedness node_Parsedness0 = Node.Parsedness.PARSED;
		Classification<Locale.LanguageRange, Node.Parsedness> classification0 = new Classification<Locale.LanguageRange, Node.Parsedness>(
				vector0, node_Parsedness0);
		String string0 = classification0.toString();
		assertEquals("Classification [category=PARSED, probability=1.0, featureset=[]]", string0);
	}

	@Test(timeout = 4000)
	public void test10() throws Throwable {
		ArrayList<List<String>> arrayList0 = new ArrayList<List<String>>();
		Classification<List<String>, Object> classification0 = new Classification<List<String>, Object>(arrayList0,
				arrayList0);
		classification0.getCategory();
		LinkedList<MethodDeclaration> linkedList0 = new LinkedList<MethodDeclaration>();
		Stack<Annotation> stack0 = new Stack<Annotation>();
		Classification<MethodDeclaration, List<Annotation>> classification1 = new Classification<MethodDeclaration, List<Annotation>>(
				linkedList0, stack0, (-479.6F));
		classification1.getFeatureset();
		assertEquals((-479.6F), classification1.getProbability(), 0.01F);
	}

	@Test(timeout = 4000)
	public void test11() throws Throwable {
		Vector<Node.Parsedness> vector0 = new Vector<Node.Parsedness>();
		Classification<Node.Parsedness, String> classification0 = new Classification<Node.Parsedness, String>(vector0,
				"");
		assertEquals(1.0F, classification0.getProbability(), 0.01F);
	}

	@Test(timeout = 4000)
	public void test12() throws Throwable {
		Modifier modifier0 = Modifier.PROTECTED;
		Classification<String, Modifier> classification0 = new Classification<String, Modifier>(
				(Collection<String>) null, modifier0, 62.0F);
		classification0.getFeatureset();
		assertEquals(62.0F, classification0.getProbability(), 0.01F);
	}

	@Test(timeout = 4000)
	public void test13() throws Throwable {
		Vector<String> vector0 = new Vector<String>();
		Classification<String, Object> classification0 = new Classification<String, Object>(vector0, vector0);
		String string0 = classification0.toString();
		assertEquals("Classification [category=[], probability=1.0, featureset=[]]", string0);
		Classification<String, Locale.LanguageRange> classification1 = new Classification<String, Locale.LanguageRange>(
				vector0, (Locale.LanguageRange) null);
		classification1.getCategory();
		TreeSet<MethodDeclaration> treeSet0 = new TreeSet<MethodDeclaration>();
		Classification<MethodDeclaration, String> classification2 = new Classification<MethodDeclaration, String>(
				treeSet0, "Classification [category=[], probability=1.0, featureset=[]]", 4875.357F);
		float float0 = classification2.getProbability();
		assertEquals(4875.357F, float0, 0.01F);
	}

	@Test(timeout = 4000)
	public void test00_1() throws Throwable {
		NaiveBayesClassifier<Properties, Hashtable<String, Object>> naiveBayesClassifier0 = new NaiveBayesClassifier<Properties, Hashtable<String, Object>>();
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		naiveBayesClassifier0.setMemoryCapacity(1001);
		assertEquals(1001, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test01_1() throws Throwable {
		NaiveBayesClassifier<Object, Classification<AstObserver.ListChangeType, Integer>> naiveBayesClassifier0 = new NaiveBayesClassifier<Object, Classification<AstObserver.ListChangeType, Integer>>();
		naiveBayesClassifier0.getCategories();
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test02_1() throws Throwable {
		NaiveBayesClassifier<Annotation, AnnotationExpr> naiveBayesClassifier0 = new NaiveBayesClassifier<Annotation, AnnotationExpr>();
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		naiveBayesClassifier0.setMemoryCapacity(0);
		int int0 = naiveBayesClassifier0.getMemoryCapacity();
		assertEquals(0, int0);
	}

	@Test(timeout = 4000)
	public void test03_1() throws Throwable {
		NaiveBayesClassifier<String, Hashtable<String, String>> naiveBayesClassifier0 = new NaiveBayesClassifier<String, Hashtable<String, String>>();
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		naiveBayesClassifier0.setMemoryCapacity((-1));
		int int0 = naiveBayesClassifier0.getMemoryCapacity();
		assertEquals((-1), int0);
	}

	@Test(timeout = 4000)
	public void test04_1() throws Throwable {
		NaiveBayesClassifier<Integer, Hashtable<Integer, MethodDeclaration>> naiveBayesClassifier0 = new NaiveBayesClassifier<Integer, Hashtable<Integer, MethodDeclaration>>();
		int int0 = naiveBayesClassifier0.getCategoriesTotal();
		assertEquals(0, int0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test05_1() throws Throwable {
		NaiveBayesClassifier<AstObserver.ListChangeType, AstObserver.ListChangeType> naiveBayesClassifier0 = new NaiveBayesClassifier<AstObserver.ListChangeType, AstObserver.ListChangeType>();
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.ADDITION;
		naiveBayesClassifier0.incrementCategory(astObserver_ListChangeType0);
		int int0 = naiveBayesClassifier0.getCategoriesTotal();
		assertEquals(1, int0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test06_1() throws Throwable {
		NaiveBayesClassifier<String, String> naiveBayesClassifier0 = new NaiveBayesClassifier<String, String>();
		float float0 = naiveBayesClassifier0.featureWeighedAverage("", "",
				(IFeatureProbability<String, String>) naiveBayesClassifier0, 0.5F, 0.0F);
		assertEquals(0.0F, float0, 0.01F);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test07_1() throws Throwable {
		NaiveBayesClassifier<String, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<String, Object>();
		Object object0 = new Object();
		float float0 = naiveBayesClassifier0.featureWeighedAverage("", object0,
				(IFeatureProbability<String, Object>) naiveBayesClassifier0, 0.25F, 0.5503662F);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		assertEquals(0.5503662F, float0, 0.01F);
	}

	@Test(timeout = 4000)
	public void test08_1() throws Throwable {
		NaiveBayesClassifier<AstObserver.ListChangeType, Hashtable<MarkerAnnotationExpr, Properties>> naiveBayesClassifier0 = new NaiveBayesClassifier<AstObserver.ListChangeType, Hashtable<MarkerAnnotationExpr, Properties>>();
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.ADDITION;
		Hashtable<MarkerAnnotationExpr, Properties> hashtable0 = new Hashtable<MarkerAnnotationExpr, Properties>();
		float float0 = naiveBayesClassifier0.featureWeighedAverage(astObserver_ListChangeType0, hashtable0,
				(IFeatureProbability<AstObserver.ListChangeType, Hashtable<MarkerAnnotationExpr, Properties>>) naiveBayesClassifier0,
				(-0.9951348F), (-0.5F));
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		assertEquals((-0.5F), float0, 0.01F);
	}

	@Test(timeout = 4000)
	public void test09_1() throws Throwable {
		NaiveBayesClassifier<Annotation, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<Annotation, Object>();
		Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
		float float0 = naiveBayesClassifier0.featureWeighedAverage(annotation0, (Object) annotation0,
				(IFeatureProbability<Annotation, Object>) naiveBayesClassifier0, 0.6159988F);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		assertEquals(0.5F, float0, 0.01F);
	}

	@Test(timeout = 4000)
	public void test10_1() throws Throwable {
		Properties properties0 = new Properties();
		NaiveBayesClassifier<Annotation, Properties> naiveBayesClassifier0 = new NaiveBayesClassifier<Annotation, Properties>();
		Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
		float float0 = naiveBayesClassifier0.featureWeighedAverage(annotation0, properties0,
				(IFeatureProbability<Annotation, Properties>) naiveBayesClassifier0);
		assertEquals(0.5F, float0, 0.01F);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test11_1() throws Throwable {
		NaiveBayesClassifier<Object, AstObserver.ListChangeType> naiveBayesClassifier0 = new NaiveBayesClassifier<Object, AstObserver.ListChangeType>();
		Properties properties0 = new Properties();
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.REMOVAL;
		Vector<Object> vector0 = new Vector<Object>();
		vector0.add((Object) properties0);
		naiveBayesClassifier0.learn(astObserver_ListChangeType0, (Collection<Object>) vector0);
		float float0 = naiveBayesClassifier0.featureProbability(properties0, astObserver_ListChangeType0);
		assertEquals(1.0F, float0, 0.01F);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test12_1() throws Throwable {
		NaiveBayesClassifier<AstObserver.ListChangeType, AstObserver.ListChangeType> naiveBayesClassifier0 = new NaiveBayesClassifier<AstObserver.ListChangeType, AstObserver.ListChangeType>();
		Vector<AstObserver.ListChangeType> vector0 = new Vector<AstObserver.ListChangeType>();
		naiveBayesClassifier0.classify(vector0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test13_1() throws Throwable {
		NaiveBayesClassifier<Integer, Annotation> naiveBayesClassifier0 = new NaiveBayesClassifier<Integer, Annotation>();
		Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
		doReturn((String) null).when(annotation0).toString();
		PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((Comparator<? super Integer>) null);
		naiveBayesClassifier0.learn(annotation0, (Collection<Integer>) priorityQueue0);
		ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
		Classification<Integer, Annotation> classification0 = naiveBayesClassifier0.classify(arrayDeque0);
		assertNotNull(classification0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		assertEquals(1.0F, classification0.getProbability(), 0.01F);
	}

	@Test(timeout = 4000)
	public void test14() throws Throwable {
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.ADDITION;
		NaiveBayesClassifier<Integer, AstObserver.ListChangeType> naiveBayesClassifier0 = new NaiveBayesClassifier<Integer, AstObserver.ListChangeType>();
		naiveBayesClassifier0.incrementCategory(astObserver_ListChangeType0);
		int int0 = naiveBayesClassifier0.categoryCount(astObserver_ListChangeType0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		assertEquals(1, int0);
	}

	@Test(timeout = 4000)
	public void test15() throws Throwable {
		NaiveBayesClassifier<Annotation, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<Annotation, Object>();
		naiveBayesClassifier0.setMemoryCapacity((-8999));
	}

	@Test(timeout = 4000)
	public void test16() throws Throwable {
		NaiveBayesClassifier<Integer, Integer> naiveBayesClassifier0 = new NaiveBayesClassifier<Integer, Integer>();
		try {
			naiveBayesClassifier0.learn((Classification<Integer, Integer>) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
			verifyException("net.mooctest.Classifier", e);
		}
	}

	@Test(timeout = 4000)
	public void test17() throws Throwable {
		NaiveBayesClassifier<Integer, String> naiveBayesClassifier0 = new NaiveBayesClassifier<Integer, String>();
		NaiveBayesClassifier<Classification<String, MethodDeclaration>, Classification<MethodDeclaration, Object>> naiveBayesClassifier1 = new NaiveBayesClassifier<Classification<String, MethodDeclaration>, Classification<MethodDeclaration, Object>>();
		Vector<MethodDeclaration> vector0 = new Vector<MethodDeclaration>();
		Classification<MethodDeclaration, Object> classification0 = new Classification<MethodDeclaration, Object>(
				vector0, naiveBayesClassifier0, 0.0F);
		try {
			naiveBayesClassifier1.learn(classification0, (Collection<Classification<String, MethodDeclaration>>) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
			verifyException("net.mooctest.Classifier", e);
		}
	}

	@Test(timeout = 4000)
	public void test18() throws Throwable {
		NaiveBayesClassifier<Hashtable<Properties, Object>, SynchronizedStmt> naiveBayesClassifier0 = new NaiveBayesClassifier<Hashtable<Properties, Object>, SynchronizedStmt>();
		Hashtable<Properties, Object> hashtable0 = new Hashtable<Properties, Object>();
		SingleMemberAnnotationExpr singleMemberAnnotationExpr0 = new SingleMemberAnnotationExpr();
		SingleMemberAnnotationExpr singleMemberAnnotationExpr1 = singleMemberAnnotationExpr0
				.setMemberValue(singleMemberAnnotationExpr0);
		BlockStmt blockStmt0 = new BlockStmt();
		SynchronizedStmt synchronizedStmt0 = new SynchronizedStmt(singleMemberAnnotationExpr1, blockStmt0);
		try {
			naiveBayesClassifier0.incrementFeature(hashtable0, synchronizedStmt0);
			fail("Expecting exception: StackOverflowError");
		} catch (StackOverflowError e) {
		}
	}

	@Test(timeout = 4000)
	public void test19() throws Throwable {
		NaiveBayesClassifier<Hashtable<AstObserver.ListChangeType, String>, Hashtable<AnnotationExpr, MethodDeclaration>> naiveBayesClassifier0 = new NaiveBayesClassifier<Hashtable<AstObserver.ListChangeType, String>, Hashtable<AnnotationExpr, MethodDeclaration>>();
		Hashtable<AnnotationExpr, MethodDeclaration> hashtable0 = new Hashtable<AnnotationExpr, MethodDeclaration>();
		try {
			naiveBayesClassifier0.incrementFeature((Hashtable<AstObserver.ListChangeType, String>) null, hashtable0);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test20() throws Throwable {
		NaiveBayesClassifier<String, MethodDeclaration> naiveBayesClassifier0 = new NaiveBayesClassifier<String, MethodDeclaration>();
		try {
			naiveBayesClassifier0.incrementCategory((MethodDeclaration) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test21() throws Throwable {
		NaiveBayesClassifier<Object, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<Object, Object>();
		NaiveBayesClassifier<Classification<Properties, Object>, String> naiveBayesClassifier1 = new NaiveBayesClassifier<Classification<Properties, Object>, String>();
		try {
			naiveBayesClassifier0.featureWeighedAverage((Object) null, (Object) naiveBayesClassifier1,
					(IFeatureProbability<Object, Object>) naiveBayesClassifier0, 0.0F, 0.0F);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test22() throws Throwable {
		NaiveBayesClassifier<MethodDeclaration, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<MethodDeclaration, Object>();
		NaiveBayesClassifier<Object, Properties> naiveBayesClassifier1 = new NaiveBayesClassifier<Object, Properties>();
		try {
			naiveBayesClassifier1.featureWeighedAverage((Object) naiveBayesClassifier0, (Properties) null,
					(IFeatureProbability<Object, Properties>) null, (float) 0);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test23() throws Throwable {
		NaiveBayesClassifier<String, String> naiveBayesClassifier0 = new NaiveBayesClassifier<String, String>();
		try {
			naiveBayesClassifier0.featureWeighedAverage((String) null, "");
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test24() throws Throwable {
		NaiveBayesClassifier<String, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<String, Object>();
		try {
			naiveBayesClassifier0.featureProbability("", (Object) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test25() throws Throwable {
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.ADDITION;
		NaiveBayesClassifier<AstObserver.ListChangeType, MarkerAnnotationExpr> naiveBayesClassifier0 = new NaiveBayesClassifier<AstObserver.ListChangeType, MarkerAnnotationExpr>();
		try {
			naiveBayesClassifier0.featureCount(astObserver_ListChangeType0, (MarkerAnnotationExpr) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test26() throws Throwable {
		NaiveBayesClassifier<Object, String> naiveBayesClassifier0 = new NaiveBayesClassifier<Object, String>();
		NaiveBayesClassifier<Object, Properties> naiveBayesClassifier1 = new NaiveBayesClassifier<Object, Properties>();
		try {
			naiveBayesClassifier1.decrementFeature(naiveBayesClassifier0, (Properties) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test27() throws Throwable {
		NaiveBayesClassifier<Classification<AstObserver.ListChangeType, String>, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<Classification<AstObserver.ListChangeType, String>, Object>();
		try {
			naiveBayesClassifier0.decrementCategory((Object) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test28() throws Throwable {
		NaiveBayesClassifier<Hashtable<Integer, SynchronizedStmt>, Properties> naiveBayesClassifier0 = new NaiveBayesClassifier<Hashtable<Integer, SynchronizedStmt>, Properties>();
		Properties properties0 = new Properties();
		LinkedList<Hashtable<Integer, SynchronizedStmt>> linkedList0 = new LinkedList<Hashtable<Integer, SynchronizedStmt>>();
		naiveBayesClassifier0.learn(properties0, (Collection<Hashtable<Integer, SynchronizedStmt>>) linkedList0);
		try {
			naiveBayesClassifier0.classify((Collection<Hashtable<Integer, SynchronizedStmt>>) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
			verifyException("net.mooctest.NaiveBayesClassifier", e);
		}
	}

	@Test(timeout = 4000)
	public void test29() throws Throwable {
		NaiveBayesClassifier<AnnotationExpr, MarkerAnnotationExpr> naiveBayesClassifier0 = new NaiveBayesClassifier<AnnotationExpr, MarkerAnnotationExpr>();
		try {
			naiveBayesClassifier0.categoryCount((MarkerAnnotationExpr) null);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 4000)
	public void test30() throws Throwable {
		NaiveBayesClassifier<Integer, Hashtable<Integer, MethodDeclaration>> naiveBayesClassifier0 = new NaiveBayesClassifier<Integer, Hashtable<Integer, MethodDeclaration>>();
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
		HashMap<Integer, MethodDeclaration> hashMap0 = new HashMap<Integer, MethodDeclaration>();
		naiveBayesClassifier0.setMemoryCapacity(0);
		Hashtable<Integer, MethodDeclaration> hashtable0 = new Hashtable<Integer, MethodDeclaration>(hashMap0);
		Classification<Integer, Hashtable<Integer, MethodDeclaration>> classification0 = new Classification<Integer, Hashtable<Integer, MethodDeclaration>>(
				arrayDeque0, hashtable0);
		naiveBayesClassifier0.learn(classification0);
		assertEquals(0, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test31() throws Throwable {
		NaiveBayesClassifier<Object, String> naiveBayesClassifier0 = new NaiveBayesClassifier<Object, String>();
		ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
		arrayDeque0.add(naiveBayesClassifier0);
		Classification<Object, String> classification0 = new Classification<Object, String>(arrayDeque0, "");
		naiveBayesClassifier0.learn(classification0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test32() throws Throwable {
		NaiveBayesClassifier<String, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<String, Object>();
		float float0 = naiveBayesClassifier0.featureWeighedAverage("", (Object) "",
				(IFeatureProbability<String, Object>) null, 0.0F, 0.0F);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		assertEquals(Float.NaN, float0, 0.01F);
	}

	@Test(timeout = 4000)
	public void test33() throws Throwable {
		NaiveBayesClassifier<Hashtable<Annotation, Annotation>, Hashtable<MethodDeclaration, MethodDeclaration>> naiveBayesClassifier0 = new NaiveBayesClassifier<Hashtable<Annotation, Annotation>, Hashtable<MethodDeclaration, MethodDeclaration>>();
		Hashtable<Annotation, Annotation> hashtable0 = new Hashtable<Annotation, Annotation>();
		Hashtable<MethodDeclaration, MethodDeclaration> hashtable1 = new Hashtable<MethodDeclaration, MethodDeclaration>();
		float float0 = naiveBayesClassifier0.featureProbability(hashtable0, hashtable1);
		assertEquals(0.0F, float0, 0.01F);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test34() throws Throwable {
		NaiveBayesClassifier<Object, Hashtable<String, Annotation>> naiveBayesClassifier0 = new NaiveBayesClassifier<Object, Hashtable<String, Annotation>>();
		Hashtable<String, Annotation> hashtable0 = new Hashtable<String, Annotation>();
		int int0 = naiveBayesClassifier0.categoryCount(hashtable0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		assertEquals(0, int0);
	}

	@Test(timeout = 4000)
	public void test35() throws Throwable {
		NaiveBayesClassifier<Hashtable<Integer, SynchronizedStmt>, Properties> naiveBayesClassifier0 = new NaiveBayesClassifier<Hashtable<Integer, SynchronizedStmt>, Properties>();
		Properties properties0 = new Properties();
		LinkedList<Hashtable<Integer, SynchronizedStmt>> linkedList0 = new LinkedList<Hashtable<Integer, SynchronizedStmt>>();
		naiveBayesClassifier0.learn(properties0, (Collection<Hashtable<Integer, SynchronizedStmt>>) linkedList0);
		naiveBayesClassifier0.decrementCategory(properties0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test36() throws Throwable {
		NaiveBayesClassifier<AstObserver.ListChangeType, Hashtable<AnnotationDeclaration, Parameter>> naiveBayesClassifier0 = new NaiveBayesClassifier<AstObserver.ListChangeType, Hashtable<AnnotationDeclaration, Parameter>>();
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.ADDITION;
		Hashtable<AnnotationDeclaration, Parameter> hashtable0 = new Hashtable<AnnotationDeclaration, Parameter>();
		naiveBayesClassifier0.incrementFeature(astObserver_ListChangeType0, hashtable0);
		naiveBayesClassifier0.decrementFeature(astObserver_ListChangeType0, hashtable0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test37() throws Throwable {
		NaiveBayesClassifier<Hashtable<Integer, SynchronizedStmt>, Properties> naiveBayesClassifier0 = new NaiveBayesClassifier<Hashtable<Integer, SynchronizedStmt>, Properties>();
		Properties properties0 = new Properties();
		LinkedList<Hashtable<Integer, SynchronizedStmt>> linkedList0 = new LinkedList<Hashtable<Integer, SynchronizedStmt>>();
		naiveBayesClassifier0.learn(properties0, (Collection<Hashtable<Integer, SynchronizedStmt>>) linkedList0);
		naiveBayesClassifier0.incrementCategory(properties0);
		naiveBayesClassifier0.decrementCategory(properties0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test38() throws Throwable {
		NaiveBayesClassifier<AstObserver.ListChangeType, Hashtable<AnnotationDeclaration, Parameter>> naiveBayesClassifier0 = new NaiveBayesClassifier<AstObserver.ListChangeType, Hashtable<AnnotationDeclaration, Parameter>>();
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.ADDITION;
		Hashtable<AnnotationDeclaration, Parameter> hashtable0 = new Hashtable<AnnotationDeclaration, Parameter>();
		naiveBayesClassifier0.incrementFeature(astObserver_ListChangeType0, hashtable0);
		naiveBayesClassifier0.incrementFeature(astObserver_ListChangeType0, hashtable0);
		naiveBayesClassifier0.decrementFeature(astObserver_ListChangeType0, hashtable0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test39() throws Throwable {
		NaiveBayesClassifier<Integer, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<Integer, Object>();
		naiveBayesClassifier0.reset();
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test40() throws Throwable {
		NaiveBayesClassifier<MethodDeclaration, String> naiveBayesClassifier0 = new NaiveBayesClassifier<MethodDeclaration, String>();
		NodeList<MethodDeclaration> nodeList0 = new NodeList<MethodDeclaration>();
		Collection<Classification<MethodDeclaration, String>> collection0 = naiveBayesClassifier0
				.classifyDetailed(nodeList0);
		NaiveBayesClassifier<Object, AstObserver.ListChangeType> naiveBayesClassifier1 = new NaiveBayesClassifier<Object, AstObserver.ListChangeType>();
		Properties properties0 = new Properties();
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.REMOVAL;
		Vector<Object> vector0 = new Vector<Object>();
		vector0.add((Object) collection0);
		naiveBayesClassifier1.learn(astObserver_ListChangeType0, (Collection<Object>) vector0);
		float float0 = naiveBayesClassifier1.featureProbability(properties0, astObserver_ListChangeType0);
		assertEquals(0.0F, float0, 0.01F);
		assertEquals(1000, naiveBayesClassifier1.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test41() throws Throwable {
		NaiveBayesClassifier<String, Object> naiveBayesClassifier0 = new NaiveBayesClassifier<String, Object>();
		int int0 = naiveBayesClassifier0.featureCount("", "");
		assertEquals(0, int0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test42() throws Throwable {
		NaiveBayesClassifier<Object, String> naiveBayesClassifier0 = new NaiveBayesClassifier<Object, String>();
		HashSet<Object> hashSet0 = new HashSet<Object>();
		hashSet0.add(naiveBayesClassifier0);
		NaiveBayesClassifier<Object, Properties> naiveBayesClassifier1 = new NaiveBayesClassifier<Object, Properties>();
		Properties properties0 = new Properties();
		naiveBayesClassifier1.learn(properties0, (Collection<Object>) hashSet0);
		Classification<Object, Properties> classification0 = naiveBayesClassifier1.classify(hashSet0);
		assertNotNull(classification0);
		assertEquals(0.75F, classification0.getProbability(), 0.01F);
		assertEquals(1000, naiveBayesClassifier1.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test43() throws Throwable {
		NaiveBayesClassifier<Classification<Properties, Object>, String> naiveBayesClassifier0 = new NaiveBayesClassifier<Classification<Properties, Object>, String>();
		naiveBayesClassifier0.decrementCategory("");
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test44() throws Throwable {
		NaiveBayesClassifier<Object, AstObserver.ListChangeType> naiveBayesClassifier0 = new NaiveBayesClassifier<Object, AstObserver.ListChangeType>();
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.REMOVAL;
		naiveBayesClassifier0.setMemoryCapacity(0);
		HashSet<Object> hashSet0 = new HashSet<Object>();
		FileDescriptor fileDescriptor0 = new FileDescriptor();
		FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
		BufferedInputStream bufferedInputStream0 = new BufferedInputStream(fileInputStream0, 1);
		hashSet0.add(bufferedInputStream0);
		hashSet0.add(astObserver_ListChangeType0);
		naiveBayesClassifier0.learn(astObserver_ListChangeType0, (Collection<Object>) hashSet0);
		assertEquals(0, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test45() throws Throwable {
		NaiveBayesClassifier<AstObserver.ListChangeType, Hashtable<AnnotationDeclaration, Parameter>> naiveBayesClassifier0 = new NaiveBayesClassifier<AstObserver.ListChangeType, Hashtable<AnnotationDeclaration, Parameter>>();
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.ADDITION;
		Hashtable<AnnotationDeclaration, Parameter> hashtable0 = new Hashtable<AnnotationDeclaration, Parameter>();
		naiveBayesClassifier0.incrementFeature(astObserver_ListChangeType0, hashtable0);
		AstObserver.ListChangeType astObserver_ListChangeType1 = AstObserver.ListChangeType.REMOVAL;
		naiveBayesClassifier0.decrementFeature(astObserver_ListChangeType1, hashtable0);
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test46() throws Throwable {
		NaiveBayesClassifier<AstObserver.ListChangeType, String> naiveBayesClassifier0 = new NaiveBayesClassifier<AstObserver.ListChangeType, String>();
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.ADDITION;
		naiveBayesClassifier0.decrementFeature(astObserver_ListChangeType0, "");
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test47() throws Throwable {
		NaiveBayesClassifier<MethodDeclaration, String> naiveBayesClassifier0 = new NaiveBayesClassifier<MethodDeclaration, String>();
		int int0 = naiveBayesClassifier0.getMemoryCapacity();
		assertEquals(1000, int0);
	}

	@Test(timeout = 4000)
	public void test48() throws Throwable {
		NaiveBayesClassifier<String, MethodDeclaration> naiveBayesClassifier0 = new NaiveBayesClassifier<String, MethodDeclaration>();
		naiveBayesClassifier0.getFeatures();
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
	}

	@Test(timeout = 4000)
	public void test49() throws Throwable {
		NaiveBayesClassifier<AstObserver.ListChangeType, String> naiveBayesClassifier0 = new NaiveBayesClassifier<AstObserver.ListChangeType, String>();
		AstObserver.ListChangeType astObserver_ListChangeType0 = AstObserver.ListChangeType.ADDITION;
		float float0 = naiveBayesClassifier0.featureWeighedAverage(astObserver_ListChangeType0, "");
		assertEquals(1000, naiveBayesClassifier0.getMemoryCapacity());
		assertEquals(0.5F, float0, 0.01F);
	}

	@Test(timeout = 4000)
	public void test50() throws Throwable {
		NaiveBayesClassifier<Object, Properties> naiveBayesClassifier0 = new NaiveBayesClassifier<Object, Properties>();
		Properties properties0 = new Properties();
		try {
			naiveBayesClassifier0.featureWeighedAverage((Object) null, properties0,
					(IFeatureProbability<Object, Properties>) naiveBayesClassifier0);
			fail("Expecting exception: NullPointerException");
		} catch (NullPointerException e) {
		}
	}
	
	@Test
	public void kill45() {
		NaiveBayesClassifier<String, MethodDeclaration> naiveBayesClassifier0 = new NaiveBayesClassifier<String, MethodDeclaration>();
		assertNotNull(naiveBayesClassifier0.getFeatures());
	}
	
	@Test(timeout = 100)
	public void kill66() {
		NaiveBayesClassifier<String, MethodDeclaration> naiveBayesClassifier0 = new NaiveBayesClassifier<String, MethodDeclaration>();
		naiveBayesClassifier0.setMemoryCapacity(1);
		assertEquals(1, naiveBayesClassifier0.getMemoryCapacity());
	}
	
	@Test
	public void killMemoryCapacityBad() throws Throwable {
		NaiveBayesClassifier<String, String> nbc = new NaiveBayesClassifier<String, String>();
	      
	      ArrayList<String> strs = new ArrayList<String>();
	      strs.add("f1");
	      strs.add("f1");
	      strs.add("f2");
	      
	      for (int i = 1; i <= 1000; i++) {
	    	  nbc.learn("c"+i, strs);
	      }
	      
	      nbc.setMemoryCapacity(999);
	      // 正常应该只出c1，不正常出c1c2
	      // 不管怎样出，count不受影响
	      
	      nbc.learn("cc1", strs);
	      // 这时应该出c2，不正常时出c3
	      // 出c2还是出c3影响count
	      
	      // 66, changed condition boundary
	      assertEquals(1, nbc.categoryCount("c1"));
	      assertEquals(0, nbc.categoryCount("c2"));
	      assertEquals(1, nbc.categoryCount("c3"));
	      
	      // 108 negate
	      assertEquals(0, nbc.featureCount("f2", "c2"));
	      
	      nbc.decrementFeature("f1", "cc1");
	      assertEquals(1, nbc.featureCount("f1", "cc1"));

	}
	
	@Test
	public void kill164() throws Throwable {
		NaiveBayesClassifier<String, String> nbc = new NaiveBayesClassifier<String, String>();
		
		List<String> featureList = Arrays.asList("f1", "f2");
		
		nbc.learn("c1", featureList);
		nbc.learn("c2", featureList);
		nbc.learn("c3", featureList);
		nbc.learn("c3", featureList);
		
		assertEquals(1F, nbc.featureProbability("f1", "c3"), 0.00000001);
		
		
		nbc.decrementCategory("c3");
		assertEquals(1, nbc.categoryCount("c3"));
	}
	
	@Test
	public void killDecrementFeature() throws Throwable {
		NaiveBayesClassifier<String, String> nbc = new NaiveBayesClassifier<String, String>();
		
		List<String> featureList = Arrays.asList("f1", "f1", "f2");
		
		nbc.learn("c", featureList);
		
		nbc.decrementFeature("f2", "c");
		
		assertEquals(2, nbc.featureCount("f1", "c"));
		assertFalse(nbc.getFeatures().contains("f2"));
		assertTrue(nbc.getFeatures().contains("f1"));
		
		nbc.decrementFeature("f1", "c");
		assertTrue(nbc.getFeatures().contains("f1"));
		assertFalse(nbc.getFeatures().contains("f2"));
		
		assertEquals(1, nbc.featureCount("f1", "c"));
		
		nbc.decrementFeature("f1", "c");
	
		assertEquals(0, nbc.featureCount("f1", "c"));
		assertEquals(1, nbc.categoryCount("c"));
		assertFalse(nbc.getFeatures().contains("f2"));
		assertFalse(nbc.getFeatures().contains("f1"));
	
		
	}
	

}
